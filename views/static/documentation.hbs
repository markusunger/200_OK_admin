<div class="columns">
  <div class="column is-one-quarter">
    <div class="box sticky">
      <aside class="menu">
        <p class="menu-label">
          General
        </p>
        <ul class="menu-list">
          <li><a href="#overview">Overview</a></li>
          <li><a href="#use-cases">Use cases</a></li>
          <li>
            <a href="#restful-requests">RESTful requests</a>
            <ul>
              <li><a href="#restful-requests-create">Create items</a></li>
              <li><a href="#restful-requests-retrieve">Retrieve collections/items</a></li>
              <li><a href="#restful-requests-alter">Alter items</a></li>
              <li><a href="#restful-requests-delete">Delete items</a></li>
            </ul>
          </li>
        </ul>
        <p class="menu-label">
          Tools
        </p>
        <ul class="menu-list">
          <li>Connecting an API</li>
          <li>Live Debugging</li>
          <li>Custom Routes</li>
        </ul>
      </aside>
    </div>
  </div>

  <div class="column">
    <div class="box">
      <h1 class="title is-2 docs">Documentation</h1>
      <h2 class="title is-4 docs" id="overview">Overview</h2>

      <p class="docs"><em>200 OK</em> is an <strong>ephemeral, RESTful</strong> API service.</p>
      <p class="docs"><strong>Ephemeral</strong> means that each API will have a short life span: after seven days it will automatically be deleted, together with all its associated data.</p>
      <p class="docs"><strong>RESTful</strong> means that the API follows the common REST (<em>Representational State Transfer</em>) principles.</p>
      <p class="docs">They key concept is that of resources: a <em>200 OK</em> API can be used to store, retrieve, alter and delete information in the form of resources. Resources are represented as a collection of items as <strong>JSON data</strong>, with each item having a unique resource identifier.</p>
      <p class="docs">The whole collection of resources as well as single items of a collection can be accessed with the commonly used HTTP request methods: <code>GET</code> for retrieval, <code>POST</code> for creation, <code>PUT</code> for altering and <code>DELETE</code> for deletion.</p>
      <p class="docs">See the section on <a href="#restful-requests">RESTful requests</a> for how to structure your requests.</p>
      <p class="docs">Every API is <strong>CORS-enabled</strong> and <strong>public</strong>, so there is no authorization and requests can come from any source, be it an application, client-side JavaScript code or the command line.</p>
      <p class="docs">In order to create an API with <em>200 OK</em>, you do not need to register or signup. It's totally free and you can get your own API in a matter of seconds by clicking the big, shiny button on <a href="/">the frontpage</a>. If you have no need for any of the helpful <a href="#tools">tools</a> that <em>200 OK</em> provides, you only need to grab your API URL (in the form of <code>https://&lt;your-API-name&gt;.200ok.app/</code> and you're ready to <a href="#restful-requests">make requests to it</a>.</p>
      <p class="docs">There are a few useful helper tools, though, that you can access by logging in with your <strong>GitHub account</strong> and connecting your API. For that, you will need to enter your API name and the <strong>API key</strong> that you receive during the API creation step.</p>

      <h2 class="title is-4 docs" id="use-cases">Use cases</h2>
      <p class="docs"><em>200 OK</em> is intended as a learning and prototyping tool. If you are learning frontend web development, you might appreciate having a no-configuration API backend that you can use to test your client-side code. Or maybe you are writing frontend code that will rely on a backend API later, but the code does not yet exist. To mock those API calls, <em>200 OK</em> is a good fit.<br>
      It might also be that you participate in a hackathon, and you need a <em>fire-and-forget</em>-type of backend without any long-lived persistence. <em>200 OK</em> is well-suited for that use case.</p>

      <p class="docs"><a href="#top">Back to top</a></p>

      <h2 class="title is-4 docs" id="restful-requests">RESTful requests</h2>
      <h2 class="subtitle is-4 docs first">Resource identifiers</h2>
      <p class="docs">The basic building block of a <em>200 OK</em> API is the <strong>resource</strong>.</p>
      <p class="docs">A simple resource can be accessed under the URI <code>/&lt;resource-name&gt;</code>. So a resource of users would have a fully qualified URL of</p>
      <pre class="code-block"><code>https://&lt;your-API-name&gt;.200ok.app/users</code></pre>
      <p class="docs">This would represent a <strong>resource collection</strong>, comprising a varying number of individual users.</p>
      <p class="docs">Each item of a resource collection automatically receives an <strong>identifier</strong> in the form of an incrementing integer value (e.g. <code>1</code> or <code>2</code>). The identifier is added automatically to each  That identifier can be used in the form of the URI <code>/&lt;resource-name&gt;/&lt;resource-identifier&gt;</code> to build a URL for access:</p>
      <pre class="code-block"><code>https://&lt;your-API-name&gt;.200ok.app/users/23</code></pre>
      <p class="docs">This would represent the user with the identifier <code>23</code>.</p>
      <p class="docs">Resources can also be nested. Going with example above, each user could have an associated image resource, for example. Nested resources belong to a specific resource item in the form of the URI <code>/&lt;resource-name&gt;/&lt;resource-identifier&gt;/&lt;nested-resource-name&gt;</code>.</p>
      <pre class="code-block"><code>https://&lt;yourAPI-name&gt;.200ok.app/users/42/images</code></pre>
      <p class="docs">This would represent the images resource collection for the user with the identifier <code>42</code>. Items from nested resource collections can be accessed the same way as described above. In total, you can nest resources up to <strong>4 levels deep</strong>.</p>
      
      <h2 class="subtitle is-4 docs">HTTP requests</h2>
      <p class="docs">There are four kinds of action available on a resource collection or individual item, represented by an HTTP verb used in performing an request to an API.</p>
      <p class="docs">
        <ol class="docs">
          <li><a href="#restful-requests-retrieve">Retrieve collections or items</a> (<code>GET</code>)</li>
          <li><a href="#restful-requests-create">Create collection items</a> (<code>POST</code>)</li>
          <li><a href="#restful-requests-alter">Alter collection items</a> (<code>PUT</code>)</li>
          <li><a href="#restful-requests-delete">Delete collection items</a> (<code>DELETE</code>)</li>
        </ol>
      </p>
      <p class="docs"><strong>Retrieval &ndash;</strong> A resource can either be retrieved as a whole (comprising all of its items) or by specifically requesting a certain resource item. This is done by a <code>GET</code> request which is the default request type for most browsers or HTTP communication tools (like <code>curl</code> or the in-browser <code>fetch</code> functionality):</p>
      <pre class="code-block">GET https://&lt;your-API-name&gt;/users</pre>
      <p class="docs">This would return the whole <code>users</code> collection as a JSON array.</p>
      <pre class="code-block">GET https://&lt;your-API-name&gt;/users/1337</pre>
      <p class="docs">This would return the <code>user</code> with the identifier <code>1337</code>. The JSON response would include an <code>id</code> field with the value <code>1337</code>.</p>
      <p class="docs"><strong>Creation &ndash;</strong> To create a new resource item, a <code>POST</code> request needs to be issued to the collection itself. The requst body must be valid JSON data. Keep in mind that <em>200 OK</em> issues the <code>id</code> field automatically to prevent inconsistent data being entered into the database. Any <code>id</code> values in your JSON request body will therefore be ignored and overwritten.</p>
      <p class="docs">The response for a <code>POST</code> request will contain the newly created item (consisting of the data you sent as well as the newly created <code>id</code> field).</p>
      <pre>
          <code class="lang-http">
          POST https://&lt;your-API-name&gt;/users<br><br>
          {
          &nbsp;&nbsp;"name": "Tom Bombadil",
          &nbsp;&nbsp;"alt-name": "Iarwain Ben-adar",
          &nbsp;&nbsp;"isEldest": true
          }
          </code>
      </pre>
      <p class="docs">The response to that request would be a JSON body with the following structure:</p>
      <pre class="code-block">
        {
        &nbsp;&nbsp;id: 5,
        &nbsp;&nbsp;"name": "Tom Bombadil",
        &nbsp;&nbsp;"alt-name": "Iarwain Ben-adar",
        &nbsp;&nbsp;"isEldest": true
        }</pre>
        <p class="docs">The value of <code>id</code> is an incrementing number that is automatically assigned by <em>200 OK</em>.</p>
        <p class="docs"><strong>Altering &ndash;</strong> In order to change the data represented by a resource item, a <code>PUT</code> request can be issued together with a JSON request body. This is always a <strong>merge operation</strong>, meaning that whatever data you send with the <code>PUT</code> request is merged with the already existing data: new fields are added, existing fields get overwritten and no existing ones get deleted.</p>
        <pre class="code-block">PUT https://&lt;your-API-name&gt;/users/5<br><br>
        {
          "movieAppearances": 0
        }</pre>
        <p class="docs">This operation will return a <code>204 No Content</code> response status code. Afterwards, the data will contain everything from the <code>POST</code> request above plus an additional field <code>movieAppearances</code>.</p>
        <p class="docs"><strong>Deleting &ndash;</strong> To remove data from a resource collection, the <code>DELETE</code> request method can be used </p>
    </div>
  </div>
</div>

<script src="/javascript/prism.js"></script>